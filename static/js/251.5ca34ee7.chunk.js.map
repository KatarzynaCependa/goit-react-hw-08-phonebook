{"version":3,"file":"static/js/251.5ca34ee7.chunk.js","mappings":"4NACA,EAAuB,0BAAvB,EAAoE,sC,mBCGvDA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAnB,IAuBlC,OACE,kBAAMG,SAtBa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OACTC,EAAOF,EAAKG,SAASD,KAAKE,MAG1BC,EAAU,CACdH,KAAAA,EACAI,OAJaN,EAAKG,SAASG,OAAOF,OAOpC,GAAIV,EAASa,SAASL,GAEpB,OADAF,EAAKQ,QACEC,MAAM,GAAD,OAAIP,EAAJ,2BAGdV,GAASkB,EAAAA,EAAAA,IAAWL,IACpBL,EAAKQ,OACN,EAG+BG,UAAWC,EAAzC,WACE,mBAAOD,UAAWC,EAAlB,kBAEE,kBACEC,KAAK,OACLX,KAAK,OACLY,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOL,UAAWC,EAAlB,oBAEE,kBACEC,KAAK,MACLX,KAAK,SACLY,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,2BAGL,E,UCrDD,EAA8B,4BCGjBI,EAAS,WACpB,IAAMzB,GAAWC,EAAAA,EAAAA,MAOjB,OACE,mBAAOkB,UAAWC,EAAlB,wCAEE,kBAAOC,KAAK,OAAOK,YAAY,SAASC,SARvB,SAAArB,GACnB,IAAMsB,EAActB,EAAEG,OAAOG,MAC7BZ,GAAS6B,EAAAA,EAAAA,IAAcD,GACxB,MAQF,E,UCjBD,EAAyB,4BCwCZE,EAAc,WACzB,IAAM5B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAnB,IAC5B6B,GAAS5B,EAAAA,EAAAA,IAAY6B,EAAAA,IACrBhC,GAAWC,EAAAA,EAAAA,MAMXgC,GAAmB,OAAI/B,GAC1BgC,MAAK,SAACC,EAAcC,GAAf,OACJD,EAAazB,KAAK2B,cAAcD,EAAc1B,KAD1C,IAGLqB,QAAO,SAAAlB,GAAO,OACbA,EAAQH,KAAK4B,cAAcvB,SAASgB,GAAUA,EAAOO,cADxC,IAIjB,OAAOL,EAAiBM,QAAU,GAChC,oDAEA,wBACGN,EAAiBO,KAAI,SAAA3B,GAAO,OAC3B,gBAAqBM,UAAWC,EAAhC,UACGP,EAAQH,KADX,MACoBG,EAAQC,QAC1B,mBAAQ2B,QAAS,kBAnBJC,EAmBuB7B,EAAQ6B,QAlBlD1C,GAAS2C,EAAAA,EAAAA,IAAcD,IADJ,IAAAA,CAmBI,EAAjB,sBAFO7B,EAAQ6B,GADU,KAQlC,E,UC9CYE,EAAkB,SAAAxC,GAAK,OAAIA,EAAMF,SAAS2C,SAAnB,ECQpC,IDHqCC,EAAAA,EAAAA,IACnC,CAJ4B,SAAA1C,GAAK,OAAIA,EAAMF,SAASA,QAAnB,EAIhB8B,EAAAA,KACjB,SAAC9B,EAAU6B,GACT,MAAe,KAAXA,EACK7B,EAEAA,EAAS6B,QACd,SAAAlB,GAAO,uBAAIA,EAAQH,KAAK4B,cAAcvB,SAASgB,EAAOA,eAA/C,QAA0D,EAA1D,GAGZ,IC7Be,WAChB,IAAMc,GAAY1C,EAAAA,EAAAA,IAAYyC,GACxB5C,GAAWC,EAAAA,EAAAA,MAKjB,OAJA8C,EAAAA,EAAAA,YAAU,WACR/C,GAASgD,EAAAA,EAAAA,MACV,GAAE,CAAChD,KAGF,4BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,8CAGJ,SAACD,EAAD,KACA,uCACA,SAAC0B,EAAD,IACCoB,GAAY,gDAA6B,SAACf,EAAD,MAG/C,E","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/contacts/selectors.js","pages/Phonebook/Phonebook.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"contactFormLabel\":\"ContactForm_contactFormLabel__16ABo\"};","import { useDispatch, useSelector } from 'react-redux';\nimport css from 'components/ContactForm/ContactForm.module.css';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const contact = {\n      name,\n      number,\n    };\n\n    if (contacts.includes(name)) {\n      form.reset();\n      return alert(`${name} is alredy in contacts`);\n    }\n\n    dispatch(addContact(contact));\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label className={css.contactFormLabel}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.contactFormLabel}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__+pnW-\"};","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/filtersSlice';\nimport css from 'components/Filter/Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const filterValue = e.target.value;\n    dispatch(filterContact(filterValue));\n  };\n\n  return (\n    <label className={css.filterLabel}>\n      Find your contacts by name\n      <input type=\"text\" placeholder=\"Search\" onChange={handleFilter} />\n    </label>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listEl\":\"ContactList_listEl__bpoQ-\",\"delBtn\":\"ContactList_delBtn__SixzE\"};","// import { useSelector, useDispatch } from 'react-redux';\n// import css from 'components/ContactList/ContactList.module.css';\n// import { deleteContact } from 'redux/contacts/operations';\n// import { selectFilteredContacts } from 'redux/contacts/selectors';\n\n// export const ContactList = () => {\n//   const contacts = useSelector(state => state.contacts.contacts);\n//   const filter = useSelector(selectFilteredContacts);\n//   const dispatch = useDispatch();\n\n//   const handleDelete = id => {\n//     dispatch(deleteContact(id));\n//   };\n\n//   const filteredContacts = [...contacts]\n//     .sort((firstContact, secondContact) =>\n//       firstContact.name.localeCompare(secondContact.name)\n//     )\n//     .filter(contact =>\n//       contact.name.toLowerCase().includes(filter && filter.toLowerCase())\n//     );\n\n//   return filteredContacts.length <= 0 ? (\n//     <p>No contacts to display.</p>\n//   ) : (\n//     <ul>\n//       {filteredContacts.map(contact => (\n//         <li key={contact.id} className={css.listEl}>\n//           {contact.name} = {contact.number}\n//           <button onClick={() => handleDelete(contact.id)}>Delete</button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from 'components/ContactList/ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilter } from 'redux/contacts/filtersSlice';\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const filteredContacts = [...contacts]\n    .sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    )\n    .filter(contact =>\n      contact.name.toLowerCase().includes(filter && filter.toLowerCase())\n    );\n\n  return filteredContacts.length <= 0 ? (\n    <p>No contacts to display.</p>\n  ) : (\n    <ul>\n      {filteredContacts.map(contact => (\n        <li key={contact.id} className={css.listEl}>\n          {contact.name} = {contact.number}\n          <button onClick={() => handleDelete(contact.id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// import { createSelector } from '@reduxjs/toolkit';\n\n// export const selectIsLoading = state => state.contacts.isLoading;\n// export const selectError = state => state.contacts.error;\n// export const selectContacts = state => state.contacts.contacts;\n// export const selectFilteredContacts = state => state.filters;\n\n// export const selectVisibleContacts = createSelector(\n//   [selectContacts, selectFilteredContacts],\n//   (contacts, filteredContacts) => {\n//     if (filteredContacts === '') {\n//       return contacts;\n//     } else {\n//       return contacts.filter(\n//         contact =>\n//           contact.name.toLowerCase().includes(filteredContacts.filter) ?? []\n//       );\n//     }\n//   }\n// );\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from './filtersSlice';\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilteredContacts = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    if (filter === '') {\n      return contacts;\n    } else {\n      return contacts.filter(\n        contact => contact.name.toLowerCase().includes(filter.filter) ?? []\n      );\n    }\n  }\n);\n","import { React, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Phonebook = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n      </HelmetProvider>\n      <ContactForm />\n      <h2>Phonebook</h2>\n      <Filter />\n      {isLoading ? <p>Loading contacts...</p> : <ContactList />}\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","state","onSubmit","e","preventDefault","form","target","name","elements","value","contact","number","includes","reset","alert","addContact","className","css","type","pattern","title","required","Filter","placeholder","onChange","filterValue","filterContact","ContactList","filter","selectFilter","filteredContacts","sort","firstContact","secondContact","localeCompare","toLowerCase","length","map","onClick","id","deleteContact","selectIsLoading","isLoading","createSelector","useEffect","fetchContacts"],"sourceRoot":""}